
import datastore;

protocol DataStore_SMM2 : DataStore {
	struct GetUsersParam {
		list<pid> pids;
		uint32 option;
	}
	
	struct GetCourseInfoParam {
		list<uint64> data_ids;
		uint32 option;
	}

	struct SearchCoursesLatestParam {
		uint32 option;
		ResultRange range;
	}

	struct SearchCoursesEndlessModeParam {
		uint32 option;
		uint32 count;
		uint8 difficulty;
	}

	struct GetUserOrCourseParam {
		string code;
		uint32 user_option;
		uint32 course_option;
	}
	
	struct BadgeInfo {
		uint16 unk1;
		uint8 unk2;
	}
	
	struct UserInfo {
		pid pid;
		string code;
		string name;
		UnknownStruct1 unk1;
		qbuffer unk2;
		string country;
		uint8 region;
		datetime last_active;
		bool unk3;
		bool unk4;
		bool unk5;
		map<uint8, uint32> unk6;
		map<uint8, uint32> unk7;
		map<uint8, uint32> unk8;
		map<uint8, uint32> unk9;
		map<uint8, uint32> unk10;
		list<BadgeInfo> badges;
		map<uint8, uint32> unk11;
		map<uint8, uint32> unk12;
	}

	enum GameStyle {
		SMB1 = 0,
		SMB3 = 1,
		SMW = 2,
		NSMBU = 3,
		SM3DW = 4
	}

	enum CourseTheme {
		GROUND = 0,
		UNDERGROUND = 1,
		CASTLE = 2,
		AIRSHIP = 3,
		UNDERWATER = 4,
		GHOST_HOUSE = 5,
		SNOW = 6,
		DESERT = 7,
		SKY = 8,
		FOREST = 9
	}

	enum CourseTag {
		NONE = 0,
		STANDARD = 1,
		PUZZLE_SOLVING = 2,
		SPEEDRUN = 3,
		AUTOSCROLL = 4,
		AUTO_MARIO = 5,
		SHORT_AND_SWEET = 6,
		MULTIPLAYER_VS = 7,
		THEMED = 8,
		MUSIC = 9
	}

	enum CourseDifficulty {
		EASY = 0,
		STANDARD = 1,
		EXPERT = 2,
		SUPER_EXPERT = 3
	}

	enum ClearCondition {
		NORMAL = 0,
		COLLECT_COINS = 4116396131,
		KILL_SKIPSQUEAKS = 4042480826
	}
	
	struct CourseInfo {
		uint64 data_id;
		string code;
		pid owner_id;
		string name;
		string description;
		uint8 game_style;
		uint8 course_theme;
		datetime upload_time;
		uint8 difficulty;
		uint8 tag1;
		uint8 tag2;
		uint8 unk1;
		uint32 clear_condition;
		uint16 clear_condition_magnitude;
		uint16 unk2;
		qbuffer unk3;
		map<uint8, uint32> unk4;
		map<uint8, uint32> unk5;
		map<uint8, uint32> unk6;
		UnknownStruct2 unk7;
		map<uint8, uint32> unk8;
		uint8 unk9;
		uint8 unk10;
		uint8 unk11;
		uint8 unk12;
		UnknownStruct3 unk13;
		UnknownStruct3 unk14;
	}
	
	struct UnknownStruct1 {
		uint16 unk1;
		uint16 unk2;
		uint16 unk3;
		uint16 unk4;
	}
	
	struct UnknownStruct2 {
		uint64 unk1;
		uint64 unk2;
		uint32 unk3;
		uint32 unk4;
	}
	
	struct UnknownStruct3 {
		string unk1;
		uint8 unk2;
		uint32 unk3;
		buffer unk4;
		string unk5;
	}

	struct SyncUserProfileParam {
		string	username;
		UnknownStruct1 unk1;
		qbuffer	unk2;
		uint8	unk3;
		string	country;
		bool	unk4;
		bool	unk5;
		string	unk_guid;
		uint32	unk6;
	}

	struct SyncUserProfileResult {
		uint64 pid;
		string username;
		UnknownStruct1 unk1;
		qbuffer unk2;
		uint8 unk3;
		string country;
		uint8 unk4;
		bool unk5;
		bool unk6;
	}

	method(48) get_users(GetUsersParam param) {
		list<UserInfo> users;
		list<result> results;
	}

	method(49) sync_user_profile(SyncUserProfileParam param) {
		SyncUserProfileResult result;
	}

	method(59) update_last_login_time() {}

	method(65) get_username_ng_type() {
		uint8 unk;
	}
	
	method(70) get_course_info(GetCourseInfoParam param) {
		list<CourseInfo> courses;
		list<result> results;
	}
	
	method(73) search_courses_latest(SearchCoursesLatestParam param) {
		list<CourseInfo> courses;
		bool result;
	}

	method(79) search_courses_endless_mode(SearchCoursesEndlessModeParam param) {
		list<CourseInfo> courses;
	}
	
	method(131) get_user_or_course(GetUserOrCourseParam param) {
		UserInfo user;
		CourseInfo course;
	}
}
